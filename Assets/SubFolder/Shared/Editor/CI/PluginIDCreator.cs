using UnityEngine;
using UnityEditor;
using System.Collections;
using System.Text;
using System.IO;

[CreateAssetMenu]
public class PluginIDCreator : ScriptableSingleton<PluginIDCreator>
{
    public string iapPrefix;
    public string iapPrefix_iPad;
    public string iapPrefixForUnity;
    public string iapPrefixForUnity_iPad;

    public string IapPrefix
    {
        get
        {
            return isIPadOnly ? iapPrefix_iPad : iapPrefix;
        }
    }

    public string IapPrefixForUnity
    {
        get
        {
            return isIPadOnly ? iapPrefixForUnity_iPad : iapPrefixForUnity;
        }
    }

    public string adjustAppToken;
    public string adjustAppToken_iPad;

    public string AdjustAppToken
    {
        get
        {
            return adjustAppToken;
        }
    }

    public string tapjoyDebugID;   
    public string tapjoyID;
    public string tapjoyID_iPad;

    public string TapjoyID
    {
        get
        {
            return isIPadOnly ? tapjoyID_iPad : tapjoyID;
        }
    }

    public string fyberAppID;
    public string fyberAppID_iPad;
    public string fyberUserID;
    public string fyberUserID_iPad;
    public string fyberSecurityToken;
    public string fyberSecurityToken_iPad;

    public string FyberAppID
    {
        get
        {
            return isIPadOnly ? fyberAppID_iPad : fyberAppID;
        }
    }

    public string FyberUserID
    {
        get
        {
            return isIPadOnly ? fyberUserID_iPad : fyberUserID;
        }
    }

    public string FyberSecurityToken
    {
        get
        {
            return isIPadOnly ? fyberSecurityToken_iPad : fyberSecurityToken;
        }
    }


	public string heyZapAppID;
	public string heyZapAppID_iPad;

	public string HeyZapAppID
	{
		get
		{
			return isIPadOnly ? heyZapAppID_iPad : heyZapAppID;
		}
	}


	public string iTunesLink;
	public string iTunesLink_iPad;
	
	public string ITunesLink
	{
		get
		{
			return isIPadOnly ? iTunesLink_iPad : iTunesLink;
		}
	}
	

    public bool isDebug;
    public bool isIPadOnly = false;

    [ButtonAttribute] public string generateButton = "Generate";

    public void Generate()
    {
        StringBuilder code = new StringBuilder();

        code.AppendLine("//This code is autogenerated, do not change it manually! Unless You know what are you doing.");
        code.AppendLine();

        code.AppendLine("#import <Foundation/Foundation.h>");       


        //add CStringCopy function
        code.AppendLine(@"
char * CStringCopy(const char * string)
{
    if (string == NULL)
    {
        return NULL;
    }
    
    char * result = (char *)malloc(strlen(string) + 1);
    strcpy(result, string);
    
    return result;
}");

        #region IAPPrefixs

        AddNSStringProperty("IAPPrefix", IapPrefix, code);
        AddCharArrayProperty("IAPPrefixForUnity", IapPrefixForUnity, code);

        #endregion

        #region Adjust

        AddCharArrayProperty("AdjustAppToken", AdjustAppToken, code);
        AddBoolProperty("AdjustEnvironmentIsProduction", !isDebug, code);

        #endregion

        #region TapJoy

        AddNSStringProperty("TapJoyIOSKey", isDebug ? tapjoyDebugID : TapjoyID, code);
        AddBoolProperty("TapJoyDebug", isDebug, code);

        #endregion

        #region Fyber

        AddCharArrayProperty("FyberAppId", FyberAppID, code);
        AddCharArrayProperty("FyberUserId", FyberUserID, code);
        AddCharArrayProperty("FyberSecurityToken", FyberSecurityToken, code);
        AddBoolProperty("FyberDebug", isDebug, code);

        #endregion

		#region HeyZap

		AddCharArrayProperty("HeyZapAppId", HeyZapAppID, code);
		AddBoolProperty("HeyZapDebug", isDebug, code);

		#endregion


		#region iTunesLink
		
		AddCharArrayProperty("ITunesLink", ITunesLink, code);
		
		#endregion

        if (!Directory.Exists(Application.dataPath.AppendPathComponent("PluginIDs")))
        {
            Directory.CreateDirectory(Application.dataPath.AppendPathComponent("PluginIDs"));
        }

        StreamWriter writer = File.CreateText(Application.dataPath.AppendPathComponent("PluginIDs/PluginIDs.m"));
        writer.Write(code.ToString());
        writer.Flush();
        writer.Close();

        AssetDatabase.ImportAsset("Assets/PluginIDs/PluginIDs.m", ImportAssetOptions.ForceSynchronousImport | ImportAssetOptions.ForceUpdate);
    }

    void AddCharArrayProperty(string name, string value, StringBuilder code)
    {
        string paramName = name + "_Param";

        code.AppendLine();

        code.AppendLine("NSString * const " + paramName + " = @\"" + value + "\";");

        code.AppendLine("const char * " + name + "()");
        code.AppendLine("{");

        code.AppendLine("return CStringCopy(" + paramName + ".UTF8String);");

        code.AppendLine("}");

        code.AppendLine();
    }

   
    void AddNSStringProperty(string name, string value, StringBuilder code)
    {
        string paramName = name + "_Param";

        code.AppendLine();

        code.AppendLine("NSString * const " + paramName + " = @\"" + value + "\";");

        code.AppendLine("NSString * " + name + "()");

        code.AppendLine("{");

        code.AppendLine(" return " + paramName + ";");

        code.AppendLine("}");

        code.AppendLine();
    }

    void AddBoolProperty(string name, bool value, StringBuilder code)
    {
        string paramName = name + "_Param";

        code.AppendLine();

        code.AppendLine("const bool " + paramName + " =" + (value ? "true" : "false") + ";");

        code.AppendLine("bool " + name + "()");

        code.AppendLine("{");

        code.AppendLine(" return " + paramName + ";");

        code.AppendLine("}");

        code.AppendLine();
    }

    void AddIntProperty(string name, string value, StringBuilder code)
    {
        string paramName = name + "_Param";

        code.AppendLine();

        code.AppendLine("const int " + paramName + " = " + (string.IsNullOrEmpty(value) ? "0" : value) + ";");

        code.AppendLine("int " + name + "()");

        code.AppendLine("{");

        code.AppendLine(" return " + paramName + ";");

        code.AppendLine("}");

        code.AppendLine();
    }
}


